//
//  CoordinateInteractor.swift
//  Waasdu
//
//  Created by Алексей on 15.05.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreLocation
import MapKit

protocol CoordinateBusinessLogic {
    func doSomething(request: Coordinate.Request)
    func getRegion(request: Coordinate.Request.RequestType.GetCircle)
    
}

protocol CoordinateDataStore {
    //var name: String { get set }
}

class CoordinateInteractor: CoordinateBusinessLogic, CoordinateDataStore {
    
    var presenter: CoordinatePresentationLogic?
    var worker: CoordinateWorker?
    //var name: String = ""

    // MARK: Do something

    func doSomething(request: Coordinate.Request) {
//        worker = CoordinateWorker()
//        worker?.doSomeWork()
        
//        let response = Coordinate.Something.Response()
//        presenter?.presentSomething(response: response)
    }
    
    func getRegion(request: Coordinate.Request.RequestType.GetCircle) {
        var response: Coordinate.Response = .init(circleCoordinates: [0,0], circleRadius: 0)
        let clLocation = CLLocation(latitude: request.coordinats.latitude, longitude: request.coordinats.longitude)
        CLGeocoder().reverseGeocodeLocation(clLocation) { [self] placeMark, error in
            guard let result = placeMark else { return }
            for r in result {
                let radius = r.region?.identifier.components(separatedBy: " radius ")
                let coords = r.region?.identifier.components(separatedBy: "> ")
                let cord2 = coords![0].components(separatedBy: "<")
                let coord3 = cord2[1].components(separatedBy: ",").map {
                    Double($0)
                }
                let rad = Double(radius![1])
                
                let latitude = coord3[0]!
                let longitude = coord3[1]!
                let circleCoordinates: [Double] = [latitude, longitude]
                response.circleCoordinates = circleCoordinates
                guard let circleRadius = rad else { return }
                response.circleRadius = circleRadius
                presenter?.presentCircle(response: response)
            }
            if let error = error {
                print(error)
            }
        }
        
    }
}
