//
//  CoordinateViewController.swift
//  Waasdu
//
//  Created by Алексей on 15.05.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import MapKit

protocol CoordinateDisplayLogic: AnyObject {
    func displaySomething(viewModel: Coordinate.ViewModel)
    func displayCircle(viewModel: Coordinate.ViewModel)
}

class CoordinateViewController: UIViewController, CoordinateDisplayLogic {
    var interactor: CoordinateBusinessLogic?
    var router: (NSObjectProtocol & CoordinateRoutingLogic & CoordinateDataPassing)?
    let mapView: MKMapView = MKMapView()


    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = CoordinateInteractor()
        let presenter = CoordinatePresenter()
        let router = CoordinateRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        addConstraint()
        mapView.delegate = self
        let gRecognizer = UITapGestureRecognizer(target: self, action: #selector(tapGesture(sender:)))
        mapView.addGestureRecognizer(gRecognizer)
    }

    // MARK: Do something

    //@IBOutlet weak var nameTextField: UITextField!
    
    @objc func tapGesture(sender: UITapGestureRecognizer) {
        if sender.state == .ended{
            let locationInView = sender.location(in: mapView)
            let coordinats = mapView.convert(locationInView, toCoordinateFrom: mapView)
            drawCircle(coordinats: coordinats)
//            let clLocation = CLLocation(latitude: coord.latitude, longitude: coord.longitude)
//            CLGeocoder().reverseGeocodeLocation(clLocation) { [self] result, error in
//                mapView.removeOverlay(circle)
//                guard let res = result else { return }
//                for r in res {
//                    let radius = r.region?.identifier.components(separatedBy: " radius ")
//                    print(radius![1])
//                    let coords = r.region?.identifier.components(separatedBy: "> ")
//                    let cord2 = coords![0].components(separatedBy: "<")
//                    let coord3 = cord2[1].components(separatedBy: ",").map {
//                        Double($0)
//                    }
//                    let rad = Double(radius![1])
//                    let coordinates = CLLocationCoordinate2D(latitude: coord3[0]!, longitude: coord3[1]!)
//
//                    guard let r = rad else { return }
//                    circle = MKCircle(center: coordinates, radius: r)
//                }
//                mapView.addOverlay(circle)
//                if let error = error {
//                    print(error)
//                }
//            }
        }
    }
    
    

//    func doSomething() {
//        let request = Coordinate.Something.Request()
//        interactor?.doSomething(request: request)
//    }
    
    func drawCircle(coordinats: CLLocationCoordinate2D) {
        let request = Coordinate.Request.RequestType.GetCircle(coordinats: coordinats)
        interactor?.getRegion(request: request)
    }

    func displaySomething(viewModel: Coordinate.ViewModel) {
        //nameTextField.text = viewModel.name
    }
    
    func displayCircle(viewModel: Coordinate.ViewModel) {
        mapView.addOverlay(viewModel.circle)
    }
    
    private func addConstraint() {
        self.view.addSubview(self.mapView)
        
        mapView.translatesAutoresizingMaskIntoConstraints = false
        
        NSLayoutConstraint.activate([
            mapView.leftAnchor.constraint(equalTo: view.leftAnchor),
            mapView.topAnchor.constraint(equalTo: view.topAnchor),
            mapView.rightAnchor.constraint(equalTo: view.rightAnchor),
            mapView.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])
        
        
    }
    

}

extension CoordinateViewController: MKMapViewDelegate {
    func mapView(_ mapView: MKMapView, rendererFor overlay: MKOverlay) -> MKOverlayRenderer {
        if overlay is MKPolyline{
            let renderer = MKPolylineRenderer(overlay: overlay)
            renderer.strokeColor = UIColor.magenta
            renderer.lineWidth = 2.0

            return renderer
        }
        if overlay is MKCircle {
            let render = MKCircleRenderer(overlay: overlay)
            render.strokeColor = .orange
            render.lineWidth = 1.0

            return render
        }
        return MKOverlayRenderer()
    }
}
