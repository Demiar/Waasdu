//
//  CoordinatePresenter.swift
//  Waasdu
//
//  Created by Алексей on 15.05.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import MapKit

protocol CoordinatePresentationLogic {
    func presentCircle(response: Coordinate.Response)
    func presentLines(response: Coordinate.Response.ResponseType.Coordinats)
}

class CoordinatePresenter: CoordinatePresentationLogic {
    weak var viewController: CoordinateDisplayLogic?
    
    // Преобразуем числа в координаты для отображения
    func presentCircle(response: Coordinate.Response) {
        let center = CLLocationCoordinate2D(latitude: response.circleCoordinates[0], longitude: response.circleCoordinates[1])
        let radius = response.circleRadius
        let viewModel = Coordinate.ViewModel.Element.Circle(
            params: MKCircle(
                center: center,
                radius: radius
            )
        )
        viewController?.displayCircle(viewModel: viewModel)
    }
    // Преобразуем числа в координаты для отображения
    func presentLines(response: Coordinate.Response.ResponseType.Coordinats) {
        var result: [MKPolyline] = []
        for res in response.params {
            let coord = res[0].map {
                CLLocationCoordinate2D(
                    latitude: $0[1],
                    longitude: $0[0])
            }

            var line = MKPolyline(coordinates: coord, count: coord.count)
            if line.boundingMapRect.spans180thMeridian{
                let re = coord.map{
                    CLLocationCoordinate2D(
                        latitude: $0.latitude,
                        longitude: $0.longitude > 180 ? 180 : $0.longitude
                    )
                }
                line = MKPolyline(coordinates: re, count: re.count)
            }
            result.append(line)
        }
        let viewModel = Coordinate.ViewModel.Element.Lines(params: result)
        viewController?.displayLines(viewModel: viewModel)
    }
}
